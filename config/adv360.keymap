/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        hm_left: hm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_LEFT";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 21 22 23 24 25 38 39 40 41 42 43 54 55 56 57 69 70 71 72 73 37 53 68 12 13 26 27 44 45 58 59 74 75>;
        };

        hm_right: hm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_RIGHT";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67>;
        };
    };

    combos {
        compatible = "zmk,combos";

        shortcat {
            bindings = <&kp RG(BACKSPACE)>;
            key-positions = <70 65>;
        };

        back {
            bindings = <&kp RG(LEFT_BRACKET)>;
            key-positions = <41 65>;
        };

        forward {
            bindings = <&kp RG(RIGHT_BRACKET)>;
            key-positions = <43 65>;
        };

        cycle_apps {
            bindings = <&kp RG(TAB)>;
            key-positions = <66 69>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL  &kp N1     &kp N2                   &kp N3               &kp N4                   &kp N5  &tog 1                                                                          &mo 3              &kp N6  &kp N7                     &kp N8                 &kp N9                     &kp N0         &kp MINUS
&kp LCTRL  &kp Q      &kp W                    &kp F                &kp P                    &kp B   &sl 1                                                                           &sl 2              &kp J   &kp L                      &kp U                  &kp Y                      &kp SEMICOLON  &mt RCTRL BSLH
&kp LALT   &kp A      &hm_left LEFT_CONTROL R  &hm_left LEFT_ALT S  &hm_left LEFT_COMMAND T  &kp G   &kp LG(LC(Q))  &kp LEFT_ALT        &trans         &trans        &kp RIGHT_ALT   &kp RC(RG(SPACE))  &kp M   &hm_right RIGHT_COMMAND N  &hm_right RIGHT_ALT E  &hm_right RIGHT_CONTROL I  &kp O          &mt RALT SQT
&kp LSHFT  &kp Z      &kp X                    &kp C                &kp D                    &kp V                                      &lt 1 TAB      &lt 1 ESCAPE                                     &kp K   &kp H                      &kp COMMA              &kp DOT                    &kp FSLH       &kp RIGHT_SHIFT
&trans     &kp GRAVE  &kp CAPS                 &trans               &trans                           &kp BACKSPACE  &mt LEFT_SHIFT ESC  &trans         &trans        &mt RCMD ENTER  &mt RSHIFT SPACE           &trans                     &trans                 &trans                     &trans         &trans
            >;
        };

        layer_keypad {
            bindings = <
&trans  &kp N1             &kp N2          &kp N3                &kp N4                 &kp N5      &trans                                      &mo 3   &kp N6           &kp KP_NUM       &kp KP_EQUAL     &kp KP_DIVIDE    &kp KP_MULTIPLY  &kp MINUS
&trans  &kp AT_SIGN        &kp MINUS       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp DOLLAR  &none                                       &none   &kp KP_N0        &kp KP_N1        &kp UP_ARROW     &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp BSLH
&trans  &kp DOUBLE_QUOTES  &kp UNDERSCORE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE   &none   &trans  &trans      &trans  &trans  &none   &kp KP_NUMBER_4  &kp LEFT_ARROW   &kp DOWN_ARROW   &kp RIGHT        &kp KP_N5        &kp SQT
&trans  &kp PERCENT        &kp CARET       &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PIPE                    &trans      &trans                  &kp KP_NUMBER_6  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_ENTER     &trans
&trans  &trans             &trans          &trans                &trans                             &trans  &trans  &trans      &trans  &trans  &trans                   &trans           &trans           &trans           &trans           &trans
            >;
        };

        layer_fn {
            bindings = <
&kp F1  &kp F2          &kp F3                 &kp F4         &kp F5             &kp F6         &tog 1                                      &mo 3   &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans          &trans                 &kp LA(LS(L))  &trans             &trans         &none                                       &none   &trans  &trans  &trans  &trans   &trans   &trans
&kp F1  &kp LA(LS(F2))  &kp LC(LA(LS(SPACE)))  &kp LA(LS(H))  &kp LA(LS(SPACE))  &kp LA(LS(K))  &none   &trans  &trans      &trans  &trans  &none   &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans  &trans          &trans                 &trans         &trans             &trans                         &trans      &trans                  &trans  &trans  &trans  &trans   &trans   &trans
&trans  &trans          &trans                 &trans         &trans                            &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans   &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
